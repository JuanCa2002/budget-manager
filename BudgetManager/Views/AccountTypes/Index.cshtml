@using BudgetManager.Models.ViewModels
@using BudgetManager.Models.Entities
@model IndexAccountTypeViewModel

@{
    ViewData["Title"] = "Tipos Cuentas";
}

<div class="text-center mb-4">
    <h1>Tipos de cuentas</h1>
    <h5>
        El tipo de cuenta se refiere a cómo podemos agrupar cuentas.
        Ejemplos: Préstamos, tarjetas de credito, etc.
    </h5>
</div>

<a asp-action="Create" class="btn btn-success mb-3"><i class="bi bi-plus-circle-fill"></i> Crear nuevo</a>

<table class="table">
    <thead>
        <tr>
            <th scope="col">Acciones</th>
            <th scope="col">Nombre</th>
        </tr>
    </thead>
    <tbody id="reorderable">
        @foreach(AccountType accountType in Model.AccountTypes)
        {
            <tr>
                <td>
                    <input type="hidden" value="@accountType.Id" class="ids"/>
                    <a class="btn btn-primary" asp-action="Edit" asp-route-id="@accountType.Id">
                        <i title="Editar" class="bi bi-pencil-fill"></i>
                     </a>
                    <a 
                        class="btn btn-danger" 
                        data-bs-toggle="modal" 
                        data-bs-target="#staticBackdrop"
                        data-id="@accountType.Id"
                        data-name="@accountType.Name"
                        onclick="openConfirmationModal(this)">
                        <i title="Eliminar" class="bi bi-trash3-fill"></i>
                     </a>
                </td>
                <td>@accountType.Name</td>
            </tr>
        }
    </tbody>
</table>

<partial name="_ConfirmationModal" model="@Model.ConfirmationModal"/>

@section scripts {
    <partial name="_ConfirmationModalScript" model="@Model.ConfirmationModal"></partial>
    <script>
        const sortUrl = '@Url.Action("sort")';

        $(function() {
            $("#reorderable").sortable({
                stop: async function(e, ui) {
                    await updateOrder();
                }
            });

            async function updateOrder() {
                const ids = getIdsFromElements();
                await sendIds(ids);
            }

            function getIdsFromElements() {
                const ids = $(".ids").map(function(){
                    return $(this).val();
                }).get();

                return ids;
            }

            async function sendIds(ids) {
                var data = JSON.stringify(ids);

                await fetch(sortUrl, {
                    method: 'POST',
                    body: data,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
            }
        })
    </script>
}
