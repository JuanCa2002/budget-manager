@using BudgetManager.Models.ViewModels
@model PaginationResponseViewModel

@{
    var linkTemplate = string.Concat(Model.BaseURL, "?Page={0}&RowsPerPage={1}");

    int GetPreviousPage(int page) => page == 1 ? page : page - 1;
    int GetNextPage(int page) => page == Model.TotalPages ? page : page + 1;
    string? isCurrentPage(int page) => page == Model.Page ? "active": null;
}

<div class="row">
    <label>Cantidad de registros a mostrar:</label>
    <div class="mb-3 col-auto">
        <select asp-for="RowsPerPage" id="rowsPerPage" class="form-select">
            <option>5</option>
            <option>10</option>
            <option>20</option>
            <option>30</option>
            <option>40</option>
            <option>50</option>
        </select>
    </div>
</div>

<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-end">
        <li class="page-item @(Model.Page == 1 ? "disabled" : null)">
            <a class="page-link" href="@string.Format(linkTemplate, GetPreviousPage(Model.Page) , Model.RowsPerPage)">Anterior</a>
        </li>
        @for (var page = 1; page <= Model.TotalPages; page++)
        {
            <li class="page-item @isCurrentPage(page)">
                    <a 
                         class="page-link" 
                         href="@string.Format(linkTemplate, page, Model.RowsPerPage)">@(page)
                    </a>
             </li>
        }
        <li class="page-item @(Model.Page == Model.TotalPages ? "disabled" : null)" ">
            <a class="page-link" href="@string.Format(linkTemplate, GetNextPage(Model.Page), Model.RowsPerPage)">Siguiente</a>
        </li>
    </ul>
</nav>
